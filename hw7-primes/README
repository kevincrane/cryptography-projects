Kevin Crane
ID#: 3218-2771-59
CSCI-531 
Homework 7 - Generating Primes

1. Use
	- Compile with:
		make hw7
	- Generate all prime numbers less than or equal to maxval
		./hw7 primes -n=maxval
	- Test the primality of number using trial division by trying all small prime numbers from 2 to floor(sqrt(number)), inclusive
		./hw7 trialdiv -n=number -p=primesfile
	- Test the primality of number using the Miller-Rabin algorithm with security parameter maxitr
		./hw7 millerrabin -n=number -t=maxitr -p=primesfile
	- Generate a numbits-bit probable prime using the Random-Search(numbits,maxitr) with security parameter maxitr
		./hw7 rndsearch -k=numbits -t=maxitr -p=primesfile -r=rndfile
	- Generate a numbits-bit provable prime using the Maurer(numbits) algorithm .
		./hw7 maurer -k=numbits -p=primesfile -r=rndfile
	- Clean binary files with:
		make clean

2. Design
	- Primes
		- * Change DEBUG value to 'true' at top of code to make primes human readable on x86 architecture
		- Create an array of booleans of size maxval, all defaulted to true
		- Starting with i=2, change all multiples of i in the array to false
		- Increment i to maxval, changing multiples of values if i is a prime number according to the array
		- Once every non-prime number has been pushed through the sieve, output all prime numbers that are remaining
	- Trial Division
		- Reads prime numbers one at a time from a binary file, primesfile
		- Divides the number to be tested by each prime number
			- If the remainder is 0 and the number != the prime, return false (it's a composite)
		- If by the end of the primesfile, nothing evenly divides into it:
			- If the number is larger than the square of the maxval of the primesfile, return true (not enough primes)
			- Otherwise, return true (it's a prime)
	- Miller-Rabin
		- Tests the primality of a number using the following algorithm:
		- Miller-Rabin(n,maxitr):
			1) write n-1 = 2sr such that r is odd
			2) for (i=1; i <= maxitr; i++) {
				2.1) a = the ith smallest prime number
					2.1.1) if (a > n-1) return("failure")
				2.2) compute y = ar mod n
				2.3) if (y != 1 and y != n-1) {
					2.3.1) for (j=1; j <= s-1 and y != n-1; j++) {
						2.3.1.1) y = y2 mod n
						2.3.1.2) if (y == 1) return("composite")
					}
					2.3.2) if (y != n-1) return("composite")
				}
			}
			3) return("prime")
	- Random Search
		- Generate a random numbit-bit number
			- Read ceil(numbit/8) bytes from the random file
			- Set bits 0 and numbit-1 to 1
			- Set bits numbit to ceil(numbit/8)*8 to 0
		- Run the Trial Division test
		- If it passes, run the Miller-Rabin test
		- If it passes that too, return that prime number
		- If it fails either test, return to the beginning and try a new number
	- Maurer
		- Generates a numbit-bit large prime number using the following algorithm:
		- Maurer(k):
			1) if (k <= 20) do forever {
				1.1) n = RndOddNum(k)
				1.2) if (TrialDivision(n) == "pass") return n
			}
			2) c = 0.1, m = 20
			3) B = c * k^2 (not used)
			4) (generate a fraction r, the size of q relative to n)
				4.1) if (k <= 2m) r = 0.5
				4.2) if (k > 2m) do forever {
					4.2.1) r = RndByte() / 255.0
					4.2.2) r = 0.5 + r / 2.0
					4.2.3) if (k*(1-r) > m) break;
				}
			5) (recursion) q = Maurer(floor(r*k)+1)
			6) num_bits_in_q = BN_num_bits(q)
				I = floor(2^(k-2) / q)
			7) do forever {
				7.1) R = RndOddNum(k+1-num_bits_in_q)
					R = (R mod I) + I + 1
					n = 2Rq+1
				7.2) if (TrialDivision(n) != "fail") {
					num_bits_in_n = BN_num_bits(n)
					7.2.1) do {
						a = RndOddNum(num_bits_in_n)
					} while (a <= 1 or a >= n-1))
					7.2.2) b = a^{n-1} mod n
					if (b == 1) {
						b = a^{2R} mod n
						d = gcd(b-1,n)
						if (d == 1) return(n)
					}
				}
			}

3. Known Bugs
	- None known

4. Deviation from the specs
	- No deviation from the specs, but my output differed from a few of the examples listed on the
	  website. However, it worked for 90% of them, as well as all of the examples in the grading guidelines.
	  Since I couldn't discern a reason for these errors, I just left it as was, because the primality tests
	  I ran confirmed that the numbers I was generating were all prime.
	
5. References
	- None

* Largest number generated was 1024-bits (309 digits) in 1:10.
